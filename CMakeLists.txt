cmake_policy(SET CMP0002 NEW)
cmake_policy(SET CMP0054 NEW)
cmake_policy(SET CMP0079 NEW)
cmake_policy(SET CMP0077 NEW)

cmake_minimum_required(VERSION 3.14)

# Request C++14 standard, using new CMake variables.
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

project(H5Support LANGUAGES C CXX VERSION 1.0.0.0)

# ---------- Setup output Directories -------------------------
if(NOT DEFINED CMAKE_LIBRARY_OUTPUT_DIRECTORY)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY
    ${H5Support_BINARY_DIR}/Bin
    CACHE PATH
    "Single Directory for all Libraries"
  )
endif()

# --------- Setup the Executable output Directory -------------
if(NOT DEFINED CMAKE_RUNTIME_OUTPUT_DIRECTORY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY
    ${H5Support_BINARY_DIR}/Bin
    CACHE PATH
    "Single Directory for all Executables."
  )
endif()

# --------- Setup the Executable output Directory -------------
if(NOT DEFINED CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY
    ${H5Support_BINARY_DIR}/Bin
    CACHE PATH
    "Single Directory for all static libraries."
  )
endif()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

option(H5Support_DISABLE_MSVC_WARNINGS "Disable some MSVC warnings" OFF)
option(H5Support_USE_MUTEX "Use mutex in functions" ON)
option(H5Support_ENABLE_NAMESPACE "Wrap all code in namespace \"H5Support\"" OFF)

set(H5Support_USER_NAMESPACE "H5Support" CACHE STRING "Namespace for H5Support")

if(H5Support_ENABLE_NAMESPACE)
  set(H5Support_NAMESPACE ON)
endif()

option(H5Support_INSTALL_FILES "Install as lib" OFF)

option(BUILD_SHARED_LIBS "Build as shared library" ON)

set(H5Support_USE_QT 0)
option(H5Support_INCLUDE_QT_API "Include support for using Qt classes with H5Lite" OFF)
if(H5Support_INCLUDE_QT_API)
  set(H5Support_USE_QT 1)
  set(CMAKE_AUTOMOC ON)
endif()

set(LIB_TYPE STATIC)
if(BUILD_SHARED_LIBS)
  set(LIB_TYPE SHARED)
endif()

add_library(H5Support ${LIB_TYPE})
add_library(H5Support::H5Support ALIAS H5Support)

set_target_properties(H5Support PROPERTIES FOLDER H5SupportProj)

set(H5Support_HDRS
  ${H5Support_SOURCE_DIR}/Source/H5Support/H5Lite.h
  ${H5Support_SOURCE_DIR}/Source/H5Support/H5Utilities.h
  ${H5Support_SOURCE_DIR}/Source/H5Support/H5ScopedSentinel.h
  ${H5Support_SOURCE_DIR}/Source/H5Support/H5ScopedErrorHandler.h
  ${H5Support_SOURCE_DIR}/Source/H5Support/H5Macros.h
)

set(H5Support_SRCS
  ${H5Support_SOURCE_DIR}/Source/H5Support/H5Lite.cpp
  ${H5Support_SOURCE_DIR}/Source/H5Support/H5Utilities.cpp
  ${H5Support_SOURCE_DIR}/Source/H5Support/H5ScopedSentinel.cpp
  ${H5Support_SOURCE_DIR}/Source/H5Support/H5ScopedErrorHandler.cpp
)

if(H5Support_USE_QT)
  list(APPEND H5Support_HDRS
    ${H5Support_SOURCE_DIR}/Source/H5Support/QH5Lite.h
    ${H5Support_SOURCE_DIR}/Source/H5Support/QH5Utilities.h
  )  

  list(APPEND H5Support_SRCS
    ${H5Support_SOURCE_DIR}/Source/H5Support/QH5Lite.cpp
    ${H5Support_SOURCE_DIR}/Source/H5Support/QH5Utilities.cpp
  )
endif()

source_group("H5Support" FILES ${H5Support_HDRS} ${H5Support_SRCS})

set(INCLUDE_H5SUPPORT_DLL_HEADER "#include \"${PROJECT_NAME}/${PROJECT_NAME}DLLExport.h\"")
set(H5Support_EXPORT_FILE_NAME ${H5Support_BINARY_DIR}/H5Support/H5SupportDLLExport.h)

set(EXPORT_HEADER_MESSAGE "// This file is auto generated. DO NOT EDIT THIS FILE. Changes will be lost on CMake rerun.")

include(GenerateExportHeader)
generate_export_header(${PROJECT_NAME}
  EXPORT_FILE_NAME ${H5Support_EXPORT_FILE_NAME}
  EXPORT_MACRO_NAME "${PROJECT_NAME}_EXPORT"
  DEPRECATED_MACRO_NAME "${PROJECT_NAME}_DEPRECATED"
  NO_EXPORT_MACRO_NAME "${PROJECT_NAME}_NO_EXPORT"
  INCLUDE_GUARD_NAME "${PROJECT_NAME}_DLL_EXPORT_H"
  STATIC_DEFINE "${PROJECT_NAME}_STATIC_DEFINE"
  NO_DEPRECATED_MACRO_NAME "${PROJECT_NAME}_NO_DEPRECATED"
  CUSTOM_CONTENT_FROM_VARIABLE EXPORT_HEADER_MESSAGE
)

set(H5Support_VERSION_CPP_PATH ${H5Support_BINARY_DIR}/H5Support/H5SupportVersion.cpp)
set(H5Support_VERSION_H_PATH ${H5Support_BINARY_DIR}/H5Support/H5SupportVersion.h)

set(VERSION_EXPORT_HEADER_INCLUDE "\"H5Support/H5Support.h\"")
set(VERSION_EXPORT "H5Support_EXPORT")
set(VERSION_NAMESPACE "H5Support")
set(VERSION_HEADER_NAME "H5SupportVersion.h")

configure_file(${H5Support_SOURCE_DIR}/Resources/CMake/Version.cpp.in ${H5Support_VERSION_CPP_PATH})
configure_file(${H5Support_SOURCE_DIR}/Resources/CMake/Version.h.in ${H5Support_VERSION_H_PATH})

set(H5Support_CONFIG_HEADER ${H5Support_BINARY_DIR}/H5Support/H5Support.h)
configure_file(${H5Support_SOURCE_DIR}/Resources/CMake/H5Support.h.in ${H5Support_CONFIG_HEADER})

set(H5Support_GENERATED_HEADERS
  ${H5Support_VERSION_H_PATH}
  ${H5Support_CONFIG_HEADER}
  ${H5Support_EXPORT_FILE_NAME}
)

set(H5Support_GENERATED_SOURCES
  ${H5Support_VERSION_CPP_PATH}
)

source_group("Generated" FILES ${H5Support_GENERATED_HEADERS} ${H5Support_GENERATED_SOURCES})

target_sources(H5Support
  PRIVATE
    ${H5Support_HDRS}
    ${H5Support_SRCS}
    ${H5Support_GENERATED_HEADERS}
    ${H5Support_GENERATED_SOURCES}
)

set_target_properties(H5Support
  PROPERTIES
    DEBUG_POSTFIX "_d"
    POSITION_INDEPENDENT_CODE ON
)

target_include_directories(H5Support
  PUBLIC
    $<INSTALL_INTERFACE:include>
    $<BUILD_INTERFACE:${H5Support_SOURCE_DIR}/Source>
    $<BUILD_INTERFACE:${H5Support_BINARY_DIR}>
)

include(${H5Support_SOURCE_DIR}/Resources/CMake/TargetCopyInstall.cmake)

find_package(hdf5 REQUIRED)

option(H5Support_INSTALL_HDF5 "Enable install of HDF5 dlls" OFF)
option(H5Support_INSTALL_QT5 "Enable install of Qt5 dlls" OFF)

set(HDF5_RULES COPY)
if(H5Support_INSTALL_HDF5)
  list(APPEND HDF5_RULES " " INSTALL)
endif()

TargetCopyInstall(${HDF5_RULES} NAME "hdf5" TARGET hdf5::hdf5-shared)

set(H5Support_Link_Libs hdf5::hdf5-shared)
if(H5Support_USE_QT)
  set(QT5_RULES COPY)
  if(H5Support_INSTALL_QT5)
    list(APPEND QT5_RULES " " INSTALL)
  endif()
  find_package(Qt5 COMPONENTS Core REQUIRED)
  TargetCopyInstall(${QT5_RULES} NAME "Qt5Core" TARGET Qt5::Core)
  list(APPEND H5Support_Link_Libs Qt5::Core)
endif()

target_link_libraries(H5Support
  PUBLIC
    ${H5Support_Link_Libs}
)

set(install_dir "bin")
set(lib_install_dir "lib")

if(APPLE)
  get_property(H5Support_PACKAGE_DEST_PREFIX GLOBAL PROPERTY H5Support_PACKAGE_DEST_PREFIX)
  set(install_dir "${H5Support_PACKAGE_DEST_PREFIX}bin")
  set(lib_install_dir "${H5Support_PACKAGE_DEST_PREFIX}lib")
elseif(WIN32)
  if(H5Support_INSTALL_FILES)
    set(install_dir "bin")
    set(lib_install_dir "bin")
  else()
    set(install_dir ".")
    set(lib_install_dir ".")
  endif()
endif()

set(H5SupportTargets "H5SupportTargets")
set(H5SupportTargets "EbsdLibTargets")


install(TARGETS H5Support
  EXPORT ${H5SupportTargets}
  COMPONENT Applications
  RUNTIME DESTINATION ${install_dir}
  LIBRARY DESTINATION ${lib_install_dir}
  ARCHIVE DESTINATION lib
  BUNDLE DESTINATION "."
)

export(EXPORT ${H5SupportTargets}
  FILE ${H5Support_BINARY_DIR}/${H5SupportTargets}.cmake
  NAMESPACE H5Support::
)

if(H5Support_INSTALL_FILES)
  install(EXPORT ${H5SupportTargets}
    FILE
    ${H5SupportTargets}.cmake
    NAMESPACE
      H5Support::
    DESTINATION
      cmake/H5Support
  )

  configure_file(${H5Support_SOURCE_DIR}/Resources/CMake/H5SupportConfig.cmake.in H5SupportConfig.cmake @ONLY)

  install(FILES
      ${H5Support_BINARY_DIR}/H5SupportConfig.cmake
    DESTINATION cmake/H5Support
  )

  install(FILES 
      ${H5Support_HDRS}
      ${H5Support_GENERATED_HEADERS}
    DESTINATION
      include/H5Support
  )
endif()

option(H5Support_BUILD_TESTING "Build H5Support tests" OFF)

if(H5Support_BUILD_TESTING)
  include(${H5Support_SOURCE_DIR}/Test/CMakeLists.txt)
endif()

option(H5Support_PACKAGE "Enables packaging for H5Support" ON)

if(H5Support_PACKAGE)
  include(${H5Support_SOURCE_DIR}/Resources/CMake/PackageProject.cmake)
endif()
